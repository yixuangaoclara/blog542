[
  {
    "objectID": "posts/ML_Model/index.html",
    "href": "posts/ML_Model/index.html",
    "title": "Building a Machine Learning Model in Python with Scikit-Learn",
    "section": "",
    "text": "Machine learning has transformed industries by enabling data-driven decision-making and predictive insights. Whether you’re a beginner or an experienced programmer, learning to build a machine learning model is an essential skill. In this blog, we will walk through the process of creating a simple machine learning model using Python and the Scikit-Learn library. This step-by-step tutorial will focus on clarity and practical application, making it accessible to those with basic programming knowledge."
  },
  {
    "objectID": "posts/ML_Model/index.html#step-1-install-required-libraries",
    "href": "posts/ML_Model/index.html#step-1-install-required-libraries",
    "title": "Building a Machine Learning Model in Python with Scikit-Learn",
    "section": "Step 1: Install Required Libraries",
    "text": "Step 1: Install Required Libraries\nBefore starting, ensure that you have Python installed on your system. You can install Scikit-Learn and other required libraries using pip:\npip install scikit-learn pandas numpy matplotlib"
  },
  {
    "objectID": "posts/ML_Model/index.html#step-2-import-libraries-and-load-the-dataset",
    "href": "posts/ML_Model/index.html#step-2-import-libraries-and-load-the-dataset",
    "title": "Building a Machine Learning Model in Python with Scikit-Learn",
    "section": "Step 2: Import Libraries and Load the Dataset",
    "text": "Step 2: Import Libraries and Load the Dataset\nFirst, import the required libraries and load the dataset:\n\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nimport pandas as pd\nimport numpy as np\n\n# Load the Iris dataset\niris = load_iris()\nX = iris.data\ny = iris.target\n\nHere, X represents the feature variables (measurements of the flowers), and y represents the target variable (species)."
  },
  {
    "objectID": "posts/ML_Model/index.html#step-3-explore-the-data",
    "href": "posts/ML_Model/index.html#step-3-explore-the-data",
    "title": "Building a Machine Learning Model in Python with Scikit-Learn",
    "section": "Step 3: Explore the Data",
    "text": "Step 3: Explore the Data\nUnderstanding the dataset is crucial before building a model. Let’s take a look at the feature names and some sample data:\n\nprint(\"Feature names:\", iris.feature_names)\nprint(\"Target names:\", iris.target_names)\nprint(\"First 5 rows of data:\\n\", X[:5])\n\nFeature names: ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']\nTarget names: ['setosa' 'versicolor' 'virginica']\nFirst 5 rows of data:\n [[5.1 3.5 1.4 0.2]\n [4.9 3.  1.4 0.2]\n [4.7 3.2 1.3 0.2]\n [4.6 3.1 1.5 0.2]\n [5.  3.6 1.4 0.2]]"
  },
  {
    "objectID": "posts/ML_Model/index.html#step-4-split-the-data",
    "href": "posts/ML_Model/index.html#step-4-split-the-data",
    "title": "Building a Machine Learning Model in Python with Scikit-Learn",
    "section": "Step 4: Split the Data",
    "text": "Step 4: Split the Data\nTo evaluate the performance of our model, we split the data into training and testing sets:\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nprint(\"Training set size:\", len(X_train))\nprint(\"Testing set size:\", len(X_test))\n\nTraining set size: 120\nTesting set size: 30"
  },
  {
    "objectID": "posts/ML_Model/index.html#step-5-build-the-model",
    "href": "posts/ML_Model/index.html#step-5-build-the-model",
    "title": "Building a Machine Learning Model in Python with Scikit-Learn",
    "section": "Step 5: Build the Model",
    "text": "Step 5: Build the Model\nWe’ll use a Random Forest Classifier, a versatile and widely used algorithm for classification tasks. Here’s how to train the model:\n\n# Create and train the model\nmodel = RandomForestClassifier(random_state=42)\nmodel.fit(X_train, y_train)\n\nRandomForestClassifier(random_state=42)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  RandomForestClassifier?Documentation for RandomForestClassifieriFittedRandomForestClassifier(random_state=42)"
  },
  {
    "objectID": "posts/ML_Model/index.html#step-6-make-predictions-and-evaluate",
    "href": "posts/ML_Model/index.html#step-6-make-predictions-and-evaluate",
    "title": "Building a Machine Learning Model in Python with Scikit-Learn",
    "section": "Step 6: Make Predictions and Evaluate",
    "text": "Step 6: Make Predictions and Evaluate\nOnce the model is trained, we can use it to make predictions on the testing set and evaluate its accuracy:\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Evaluate the model\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy:\", accuracy)\n\nAccuracy: 1.0"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Building a Machine Learning Model in Python with Scikit-Learn",
    "section": "",
    "text": "Building a Machine Learning Model in Python with Scikit-Learn\n\n\n\n\n\n\nblog\n\n\n\n\n\n\n\n\n\nJan 15, 2025\n\n\nYixuan Gao\n\n\n\n\n\n\nNo matching items"
  }
]